setwd("~/Documents/R/aireAnalytics/modelo/src")
source('~/Documents/R/aireAnalytics/modelo/src/00_carga.R')
##########################################################################
# Proyecto: Aire Analytics
# Fecha última modificación: 2018-07-14
# Código: mapas de los municipios y barrios de Madrid
##########################################################################
#Cargamos librerías
library(rgeos)
library(sp)
library(rgdal)
library(RColorBrewer)
library(ggplot2)
library(ggmap)
#función para mover archivo de una ruta a otra
my.file.rename <- function(from, to) {
todir <- dirname(to)
if (!isTRUE(file.info(todir)$isdir)) dir.create(todir, recursive=TRUE)
file.rename(from = from,  to = to)
}
#-------------------------------------------------------------------------
# 1. Incorporamos municipios de España y filtramos los de la CA de Madrid
#-------------------------------------------------------------------------
#Si el shp de municipios existe, sale. Si no existe, lo descarga
if (file.exists("../dat/shapefiles/municipios/Municipios_IGN.shp")){
# sale del bucle sin hacer nada
} else {
#crea un zip, descarga la info, movemos el zip de la ruta temporal a nuestro dat/shapefiles,
#descomprimimos y borramos el .zip creado
url1 <-"https://opendata.arcgis.com/datasets/53229f5912e04f1ba6dddb70a5abeb72_0.zip"
fichero1 <- paste0(tempfile(), ".zip")
fichero1
download.file(url1, destfile = fichero1)
my.file.rename(from = fichero1,
to = "../dat/shapefiles/municipios.zip")
unzip(zipfile= "../dat/shapefiles/municipios.zip" ,exdir = "../dat/shapefiles/municipios")
file.remove("../dat/shapefiles/municipios.zip")
}
#leemos los municipios de toda España.
municipios_espanha <- readOGR(dsn="../dat/shapefiles/municipios",layer="Municipios_IGN")
#los municicipios de la Comunidad de Madrid son del tipo  CODNUT2 LIKE 'ES30'
municipios<-municipios_espanha[municipios_espanha@data$CODNUT2=="ES30",]
plot(municipios)
estaciones_ayuntamiento$LAT.DD <- as.numeric(as.character(estaciones_ayuntamiento$LAT.DD))
estaciones_ayuntamiento$LONG.DD <- as.numeric(as.character(estaciones_ayuntamiento$LONG.DD))
estaciones_comunidad$LATITUD <- as.numeric(as.character(estaciones_comunidad$LATITUD))
estaciones_comunidad$LONGITUD <- as.numeric(as.character(estaciones_comunidad$LONGITUD))
#-----------------------------------------------------------
# 2. Ploteamos las estaciones de medición de la capital
#-----------------------------------------------------------
#Usamos longitudes y latitudes como primera y segunda columnas, respectivamente.
estacionesdf1 <- data.frame(Longitude = estaciones_ayuntamiento$LONG.DD,
Latitude =estaciones_ayuntamiento$LAT.DD,
names = estaciones_ayuntamiento$NÚMERO)
estacionesdf2 <- data.frame(Longitude = estaciones_comunidad$LONGITUD,
Latitude =estaciones_comunidad$LATITUD,
names = estaciones_comunidad$COD_ESTACIÓN)
estacionesdf <-rbind(estacionesdf1,estacionesdf2)
#Obtenemos las coordenadas de las estaciones.
coordinates(estacionesdf) <- ~ Latitude + Longitude
#Determinamos la proyección del objeto SpatialPointsDataFrame usando la proyección del shapefile.
proj4string(estacionesdf) <- proj4string(municipios)
over(estacionesdf, municipios)
over(municipios, estacionesdf)
plot(municipios)
points(estacionesdf$Latitude ~ estacionesdf$Longitude, col = "red", cex = 1)
#-----------------------------------------------------------
# Como es lógico, están dentro de la ciudad de Madrid,
# ya que son las estaciones dentro de la capital
# 3. Centramos el foco a la ciudad que es la zona objetivo
#-----------------------------------------------------------
#icono para mostrar sobre el mapa
greenLeafIcon <- makeIcon(
iconUrl = "https://openclipart.org/image/2400px/svg_to_png/177826/color-icons-green-home.png",
iconWidth = 25, iconHeight = 35,
iconAnchorX = 22, iconAnchorY = 94,
# shadowUrl = "http://leafletjs.com/examples/custom-icons/leaf-shadow.png",
#shadowWidth = 50, shadowHeight = 64,
#shadowAnchorX = 4, shadowAnchorY = 62
)
#estacionesdf$Latitude ~ estacionesdf$Longitude
leaflet(data = estacionesdf) %>% addTiles() %>%
addMarkers(~ estacionesdf$Longitude, estacionesdf$Latitude, icon = greenLeafIcon)%>%
#addMarkers(~estaciones_comunidad$LONGITUD, ~estaciones_comunidad$LAT, icon = greenLeafIcon)%>%
addPolygons(data = municipios, stroke = TRUE, weight = 1, opacity = 0.5, fill = TRUE, fillOpacity = 0.2)
#     label = NULL, labelOptions = NULL, options = pathOptions(),
#-----------------------------------------------------------
# 4. El objetivo es obtener un mallado de la ciudad de Madrid. Para esto:
#    - Incorporaremos los barrios de la ciudad de Madrid
#      url_interesante: http://www.nickeubank.com/wp-content/uploads/2015/10/RGIS3_MakingMaps_part1_mappingVectorData.html
#    - Sacaremos los contornos de la unión de los barrios (03_mallado.R)
#    - Se hará el mallado (03_mallado.R)
#-----------------------------------------------------------
#Descargamos los barrios de Madrid Ciudad para sacar la forma y el mallado
#url: "https://datos.madrid.es/egob/catalogo/200078-10-distritos-barrios.zip"
if (file.exists("../dat/shapefiles/barrios/BARRIOS.shp")){
# sale del bucle sin hacer nada
} else {
#crea un zip, descarga la info, movemos el zip de la ruta temporal a nuestro dat/shapefiles,
#descomprimimos y borramos el .zip creado
url2 <-"https://datos.madrid.es/egob/catalogo/200078-10-distritos-barrios.zip"
fichero2 <- paste0(tempfile(), ".zip")
fichero2
download.file(url2, destfile = fichero2)
my.file.rename(from = fichero2,
to = "../dat/shapefiles/barrios.zip")
unzip(zipfile= "../dat/shapefiles/barrios.zip" ,exdir = "../dat/shapefiles/")
file.remove("../dat/shapefiles/barrios.zip")
#cambiamos el nombre del directorio contenedor de los shapefiles
my.file.rename(from = "../dat/shapefiles/SHP_ETRS89",
to = "../dat/shapefiles/barrios")
}
#leemos los barrios de la ciudad de Madrid
barrios <- readOGR(dsn="../dat/shapefiles/barrios",layer="BARRIOS")
base.map <- gmap(barrios, type = "terrain")
reprojected.barrios <- spTransform(barrios, base.map@crs)
plot(base.map)
points(estaciones_ayuntamiento$LONG.DD,estaciones_ayuntamiento$LAT.DD,col="red",pch=16)
#barrios de la ciudad de Madrid
plot(reprojected.barrios, add = T, border = "black", col = "transparent")
#-----------------------------------------------------------
# 5. Centroides de cada barrio.
#-----------------------------------------------------------
trueCentroids = gCentroid(barrios,byid=TRUE)
plot(barrios)
points(coordinates(barrios),pch=3,col="red")
head(coordinates(trueCentroids))
#-----------------------------------------------------------
# 2. Ploteamos las estaciones de medición de la capital
#-----------------------------------------------------------
#Usamos longitudes y latitudes como primera y segunda columnas, respectivamente.
estacionesdf1 <- data.frame(Longitude = estaciones_ayuntamiento$LONG.DD,
Latitude =estaciones_ayuntamiento$LAT.DD,
names = estaciones_ayuntamiento$NÚMERO)
estacionesdf2 <- data.frame(Longitude = estaciones_comunidad$LONGITUD,
Latitude =estaciones_comunidad$LATITUD,
names = estaciones_comunidad$COD_ESTACIÓN)
estacionesdf <-rbind(estacionesdf1,estacionesdf2)
#Obtenemos las coordenadas de las estaciones.
coordinates(estacionesdf) <- ~ Latitude + Longitude
#Determinamos la proyección del objeto SpatialPointsDataFrame usando la proyección del shapefile.
proj4string(estacionesdf) <- proj4string(municipios)
over(estacionesdf, municipios)
over(municipios, estacionesdf)
plot(municipios)
points(estacionesdf$Latitude ~ estacionesdf$Longitude, col = "red", cex = 1)
#-----------------------------------------------------------
# Como es lógico, están dentro de la ciudad de Madrid,
# ya que son las estaciones dentro de la capital
# 3. Centramos el foco a la ciudad que es la zona objetivo
#-----------------------------------------------------------
#icono para mostrar sobre el mapa
greenLeafIcon <- makeIcon(
iconUrl = "https://openclipart.org/image/2400px/svg_to_png/177826/color-icons-green-home.png",
iconWidth = 25, iconHeight = 35,
iconAnchorX = 22, iconAnchorY = 94,
# shadowUrl = "http://leafletjs.com/examples/custom-icons/leaf-shadow.png",
#shadowWidth = 50, shadowHeight = 64,
#shadowAnchorX = 4, shadowAnchorY = 62
)
#estacionesdf$Latitude ~ estacionesdf$Longitude
leaflet(data = estacionesdf) %>% addTiles() %>%
addMarkers(~ estacionesdf$Longitude, estacionesdf$Latitude, icon = greenLeafIcon)%>%
#addMarkers(~estaciones_comunidad$LONGITUD, ~estaciones_comunidad$LAT, icon = greenLeafIcon)%>%
addPolygons(data = municipios, stroke = TRUE, weight = 1, opacity = 0.5, fill = TRUE, fillOpacity = 0.2)
#     label = NULL, labelOptions = NULL, options = pathOptions(),
#-----------------------------------------------------------
# 4. El objetivo es obtener un mallado de la ciudad de Madrid. Para esto:
#    - Incorporaremos los barrios de la ciudad de Madrid
#      url_interesante: http://www.nickeubank.com/wp-content/uploads/2015/10/RGIS3_MakingMaps_part1_mappingVectorData.html
#    - Sacaremos los contornos de la unión de los barrios (03_mallado.R)
#    - Se hará el mallado (03_mallado.R)
#-----------------------------------------------------------
#Descargamos los barrios de Madrid Ciudad para sacar la forma y el mallado
#url: "https://datos.madrid.es/egob/catalogo/200078-10-distritos-barrios.zip"
if (file.exists("../dat/shapefiles/barrios/BARRIOS.shp")){
# sale del bucle sin hacer nada
} else {
#crea un zip, descarga la info, movemos el zip de la ruta temporal a nuestro dat/shapefiles,
#descomprimimos y borramos el .zip creado
url2 <-"https://datos.madrid.es/egob/catalogo/200078-10-distritos-barrios.zip"
fichero2 <- paste0(tempfile(), ".zip")
fichero2
download.file(url2, destfile = fichero2)
my.file.rename(from = fichero2,
to = "../dat/shapefiles/barrios.zip")
unzip(zipfile= "../dat/shapefiles/barrios.zip" ,exdir = "../dat/shapefiles/")
file.remove("../dat/shapefiles/barrios.zip")
#cambiamos el nombre del directorio contenedor de los shapefiles
my.file.rename(from = "../dat/shapefiles/SHP_ETRS89",
to = "../dat/shapefiles/barrios")
}
#leemos los barrios de la ciudad de Madrid
barrios <- readOGR(dsn="../dat/shapefiles/barrios",layer="BARRIOS")
base.map <- gmap(barrios, type = "terrain")
reprojected.barrios <- spTransform(barrios, base.map@crs)
plot(base.map)
points(estaciones_ayuntamiento$LONG.DD,estaciones_ayuntamiento$LAT.DD,col="red",pch=16)
#barrios de la ciudad de Madrid
plot(reprojected.barrios, add = T, border = "black", col = "transparent")
#-----------------------------------------------------------
# 5. Centroides de cada barrio.
#-----------------------------------------------------------
trueCentroids = gCentroid(barrios,byid=TRUE)
plot(barrios)
points(coordinates(barrios),pch=3,col="red")
head(coordinates(trueCentroids))
##########################################################################
# Proyecto: Aire Analytics
# Fecha última modificación: 2018-07-14
# Código: Mallado de la ciudad de Madrid
##########################################################################
library(rgeos)
#-----------------------------------------------------------
# 1. Contorno de la ciudad de Madrid
#-----------------------------------------------------------
plot(barrios)
points(estaciones_ayuntamiento$LONG.DD,estaciones_ayuntamiento$LAT.DD,col="red",pch=16)
# Juntamos el mallado con los barrios de Madrid
madrid_centro = gUnaryUnion(barrios,barrios$dummy)
# intersección del grid con el mapa de los barrios
map <- gIntersection(barrios,madrid_centro,drop_lower_td = TRUE)
plot(madrid_centro)
#-----------------------------------------------------------
# 2. Mallado de la ciudad
#-----------------------------------------------------------
e <- extent(bbox(barrios))                  # define boundaries of object
r <- raster(e)                           # create raster object
dim(r) <- c(40, 40)                      # specify number of cells
projection(r) <- CRS(proj4string(barrios))  # give it the same projection as port
g <- as(r, 'SpatialPolygonsDataFrame')   # convert into polygon
summary(g)
#We now clip the new grid to match Portland and perform the same aggregation procedure to count the number of crimes within our newly defined (square) polygons.dd
p <- g[barrios,]
barrios_agg <- aggregate(x=barrios["ORIG_FID"],by=p,FUN=length)
barrios_agg$ORIG_FID[is.na(barrios_agg$ORIG_FID)] <- 0
#Something to watch out for when using a fine grid, which are now a lot smaller than the initial police districts, is that some polygons may not have any crimes committed within them. The length function therefore takes the length of an empty vector in those cases, which returns a NA value. To avoid ugly NA parts on the map, we replace them with with zeros.
barrios_agg$ORIG_FID[is.na(barrios_agg$ORIG_FID)] <- 0
barrios_agg <- spTransform(barrios_agg, CRS("+init=epsg:4326")) # reproject
qpal <- colorBin("Reds", barrios_agg$ORIG_FID, bins=5)       # define color bins
plot2<-leaflet(barrios_agg) %>%
#cambiar el fillOpacity a 0.5 para ver color
addPolygons(stroke = TRUE,opacity = 1,fillOpacity = 0., smoothFactor = 0.5,
color="black",fillColor = ~qpal(ORIG_FID),weight = 0.5)# %>%
#addLegend(values=~ORIG_FID,pal=qpal,title="Niveles NOx de Madrid")
#mallado
plot2
#-----------------------------------------------------------
# 3. Mallado de la ciudad sobre mapa
#-----------------------------------------------------------
# la clase de map--> es spatialpolygons
barrios_agg2 <- aggregate(x=barrios["ORIG_FID"],by=map,FUN=length)
barrios_agg2$ORIG_FID[is.na(barrios_agg2$ORIG_FID)] <- 0
barrios_agg2 <- spTransform(barrios_agg2, CRS("+init=epsg:4326"))
qpal <- colorBin("Reds", barrios_agg2$ORIG_FID, bins=5)
plot3 <- leaflet(barrios_agg2) %>%
addPolygons(stroke = TRUE,opacity = 1,fillOpacity = 0, smoothFactor = 0.5,
color="black",fillColor = ~qpal(ORIG_FID),weight = 1) #%>%
# Mallado de la ciudad de Madrid en el mapa
plot3<-plot2%>% addTiles()
plot4 <- plot3 %>% addTiles()
plot4
# Zoom dee la zona de interés
cent <- gCentroid(barrios_agg2) # Find center of map
plot5 <- plot4 %>% setView(zoom = 10.5,lng=cent@coords[[1]], lat=cent@coords[[2]])
plot5
#-----------------------------------------------------------
# 3. Centroides del mallado y estaciones
#-----------------------------------------------------------
#mallado con los centroides de cada celda
trueCentroids = gCentroid(barrios_agg,byid=TRUE)
plot(barrios_agg)
points(estaciones_ayuntamiento$LONG.DD,estaciones_ayuntamiento$LAT.DD,col="red",pch=16)
points(coordinates(barrios_agg),pch=1,col="blue")
points(trueCentroids,pch=3, col="blue")
head(coordinates(trueCentroids))
leaflet(data = estaciones_ayuntamiento) %>% addTiles() %>%
addPolygons(data = barrios_agg2, stroke = TRUE, weight = 1, opacity = 0.5, fill = TRUE, fillOpacity = 0.2)%>%
addMarkers(~estaciones_ayuntamiento$LONG.DD, ~estaciones_ayuntamiento$LAT.DD, icon = greenLeafIcon)
leaflet(data = estaciones_ayuntamiento) %>% addTiles() %>%
addPolygons(data = barrios_agg, stroke = TRUE, weight = 1, opacity = 0.5, fill = TRUE, fillOpacity = 0.2)%>%
addMarkers(~estaciones_ayuntamiento$LONG.DD, ~estaciones_ayuntamiento$LAT.DD, icon = greenLeafIcon)
